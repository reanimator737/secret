/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface Secret20ShopInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "sell(uint256)": FunctionFragment;
    "testTakeAll()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenBalance()": FunctionFragment;
    "userBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "sell"
      | "testTakeAll"
      | "token"
      | "tokenBalance"
      | "userBalance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sell", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "testTakeAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testTakeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalance",
    data: BytesLike
  ): Result;

  events: {
    "Bought(uint256,address)": EventFragment;
    "Sold(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
}

export interface BoughtEventObject {
  _amount: BigNumber;
  _buyer: string;
}
export type BoughtEvent = TypedEvent<[BigNumber, string], BoughtEventObject>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export interface SoldEventObject {
  _amount: BigNumber;
  _seller: string;
}
export type SoldEvent = TypedEvent<[BigNumber, string], SoldEventObject>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export interface Secret20Shop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Secret20ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    sell(
      _amountToSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    testTakeAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    userBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  sell(
    _amountToSell: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  testTakeAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  userBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    sell(_amountToSell: BigNumberish, overrides?: CallOverrides): Promise<void>;

    testTakeAll(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    userBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Bought(uint256,address)"(
      _amount?: null,
      _buyer?: string | null
    ): BoughtEventFilter;
    Bought(_amount?: null, _buyer?: string | null): BoughtEventFilter;

    "Sold(uint256,address)"(
      _amount?: null,
      _seller?: string | null
    ): SoldEventFilter;
    Sold(_amount?: null, _seller?: string | null): SoldEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      _amountToSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    testTakeAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    userBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      _amountToSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testTakeAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
